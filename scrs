#!/usr/bin/perl
# https://developer.apple.com/documentation/xcode/adding-identifiable-symbol-names-to-a-crash-report

use warnings;
use strict;
use Getopt::Std;

my %OPTIONS = undef;

my $GREP = "/usr/bin/grep";

my $REGEX_UNSYMB = '^\d+\s+(\S+)\s+(0x[0-9a-f]+)\s+(0x[0-9a-f]+)\s+\+\s+(\d+)$';

symbolicate_crash_report();

sub usage {
print STDERR <<EOF;

Usage:

    $0 [-h] [-o <OUTPUT_FILE>] LOGFILE [SYMBOL_PATH ...]

    Symbolicates a crashdump LOGFILE which may be "-" to refer to stdin.
    By default, all heuristics will be employed in an attempt
    to symbolicate all addresses.
    Additional symbol files can be found under specified directories.

Options:

    -o  If specified, the symbolicated log will be written to OUTPUT_FILE
        (defaults to stdout)
    -h  Display this message
    -v  Verbose

EOF
exit 1;
}

sub get_required_binary_image_load_addresses {
    my ( @lines ) = @_;
    if ( $OPTIONS{ v } ) {
        print STDERR "\nFound Binary Images Addresses:\n\n";
    }
    return @lines
}

sub get_binary_images_list {
    my ( @lines ) = @_;
    if ( $OPTIONS{ v } ) {
        print STDERR "\nRequired Binary Images:\n\n";
    }
    return @lines
}

sub get_unsymbolicated_lines {
    my ( $source ) = @_;
    my @lines = split(/\n/, qx/$GREP -E '$REGEX_UNSYMB' $source/);
    if ( $OPTIONS{ v } ) {
        print STDERR "\nFound unsymbolicated lines:\n\n";
        for my $line ( @lines ) {
            print STDOUT "$line\n";
        }
    }
    return @lines
}

sub symbolicate_crash_report {

    $Getopt::Std::STANDARD_HELP_VERSION = 1;

    getopts( 'hvo:', \%OPTIONS );

    usage() if $OPTIONS{ 'h' };

    my ( $source ) = @ARGV;

    usage() if !defined( $source );

    print STDERR "\nSymbolicating...\n" if ( $OPTIONS{ v } );

    my @lines = get_unsymbolicated_lines( $source );

    my @addresses = get_required_binary_image_load_addresses( @lines );

    my @images = get_binary_images_list( @addresses );

    print STDOUT "\n";

    exit 0;
}
